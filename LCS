//TABULATION
int solve(int index1,int index2,string s1,string s2,vector<vector<int>>&dp){
        for(int i=1;i<=index1;i++){
            for(int j=1;j<=index2;j++){
                if(s1[i-1]==s2[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[index1][index2];
        
    }
    int lcs(int n, int m, string s1, string s2)
    {
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        return solve(n,m,s1,s2,dp);
    }

//SPACE OPT
nt solve(int index1,int index2,string s1,string s2){
        vector<int>prev(index2+1,0);
        vector<int>curr(index2+1,0);
        for(int i=1;i<=index1;i++){
            for(int j=1;j<=index2;j++){
                if(s1[i-1]==s2[j-1]){
                    curr[j]=1+prev[j-1];
                }
                else{
                    
                curr[j]=max(prev[j],curr[j-1]);
                }
            }
            prev=curr;
        }
        return prev[index2];
        
    }
    int lcs(int n, int m, string s1, string s2)
    {
        return solve(n,m,s1,s2);
    }
