//https://leetcode.com/problems/maximal-square/description/
class Solution {
public:
    int solve(vector<vector<char>>&matrix,int row,int col,int &maxi,vector<vector<int>>&dp){
        if(row>=matrix.size() || col>=matrix[0].size())return 0;
        if(dp[row][col]!=-1){
            return dp[row][col];
        }
        int right=solve(matrix,row,col+1,maxi,dp);
        int bottom=solve(matrix,row+1,col,maxi,dp);
        int dia=solve(matrix,row+1,col+1,maxi,dp);
        if(matrix[row][col]=='1'){
            int ans=1+min(right,min(bottom,dia));
            maxi=max(maxi,ans*ans);
            return dp[row][col]=ans;
        }
        else{
            return dp[row][col]=0;
        }
    }
    int maximalSquare(vector<vector<char>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        int maxi=0;
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        solve(matrix,0,0,maxi,dp);
        return maxi;
    }
};
