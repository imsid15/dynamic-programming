//https://leetcode.com/problems/house-robber-iii/description/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int solve(TreeNode* root,int buy,map<pair<TreeNode*,int>,int>&m){
        if(root==NULL)return 0;
        if(m.find({root,buy})!=m.end())return m[{root,buy}];
        if(buy==0){
            int nottake=solve(root->left,0,m)+solve(root->right,0,m);
            int take=root->val+solve(root->left,1,m)+solve(root->right,1,m);
            return m[{root,buy}]=max(take,nottake);
        }
        else{
            return m[{root,buy}]=solve(root->left,0,m)+solve(root->right,0,m);
        }
    }
    int rob(TreeNode* root) {
        map<pair<TreeNode*,int>,int>m;
        return solve(root,0,m);
    }
};
