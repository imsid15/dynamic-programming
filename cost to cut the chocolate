//RECURSION
int solve(int i,int j,vector<int>&cuts){
    if(i>j)return 0;
    int mini=INT_MAX;
    for(int ind=i;ind<=j;ind++){
        int ans=cuts[j+1]-cuts[i-1]+solve(i,ind-1,cuts)+solve(ind+1,j,cuts);
        mini=min(ans,mini);
    }
    return mini;
}
int cost(int n, int c, vector<int> &cuts){
    sort(cuts.begin(),cuts.end());
    cuts.insert(cuts.begin(),0);
    cuts.push_back(n);
    return solve(1,c,cuts);
}
// MEMORIZATION
int solve(int i,int j,vector<int>&cuts,vector<vector<int>>&dp){
    if(i>j)return 0;
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    int mini=INT_MAX;
    for(int ind=i;ind<=j;ind++){
        int ans=cuts[j+1]-cuts[i-1]+solve(i,ind-1,cuts,dp)+solve(ind+1,j,cuts,dp);
        mini=min(ans,mini);
    }
    return dp[i][j]=mini;
}
int cost(int n, int c, vector<int> &cuts){
    sort(cuts.begin(),cuts.end());
    cuts.insert(cuts.begin(),0);
    cuts.push_back(n);
    vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
    return solve(1,c,cuts,dp);
}
