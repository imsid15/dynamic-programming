//Matrix chain multiplication
//codingninjas.com/studio/problems/matrix-chain-multiplication_975344?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=1
//MEMORISATION
#include <bits/stdc++.h> 
int solve(int i,int j,vector<int>&arr,vector<vector<int>>&dp){
    if(i==j){
        return 0;
    }
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    int mini=1e9;
    for(int k=i;k<j;k++){
        int steps=arr[i-1]*arr[k]*arr[j] + solve(i,k,arr,dp) + solve(k+1,j,arr,dp);
        mini=min(mini,steps);
    }
    return dp[i][j]=mini;
}
int matrixMultiplication(vector<int> &arr, int N)
{
    vector<vector<int>>dp(N,vector<int>(N,-1));
    return solve(1,N-1,arr,dp);
}
//TABULATION

#include <bits/stdc++.h> 
int solve(int i,int j,vector<int>&arr,vector<vector<int>>&dp){
    for(int index1=arr.size()-1;index1>=i;index1--){
        for(int index2=index1+1;index2<=j;index2++){
            int mini=1e9;
            for(int k=index1;k<index2;k++){
                int steps=arr[index1-1]*arr[k]*arr[index2] + dp[index1][k] + dp[k+1][index2];
                mini=min(mini,steps);
            }
            dp[index1][index2]=mini;
        }
    }
    return dp[1][j];
}
int matrixMultiplication(vector<int> &arr, int N)
{
    vector<vector<int>>dp(N,vector<int>(N,0));
    return solve(1,N-1,arr,dp);
}
