//https://leetcode.com/problems/delete-and-earn/description/
class Solution {
public:
    int solve(vector<int>&v, unordered_map<int,int>&m,int index,vector<int>&dp){
        int n=v.size();
        if(index==n)return 0;
        if(dp[index]!=-1)return dp[index];
        int nottake=solve(v,m,index+1,dp);
        int take=v[index]*m[v[index]];
        if(index+1!=n && v[index+1]==v[index]+1){
            take+=solve(v,m,index+2,dp);
        }
        else if(index+1!=n && v[index+1]!=v[index]+1){
            take+=solve(v,m,index+1,dp);
        }
        return dp[index]=max(take,nottake);
    }
    int deleteAndEarn(vector<int>& nums) {
        unordered_map<int,int>m;
        vector<int>v;
        for(int i=0;i<nums.size();i++){
            if(m[nums[i]]==0){
                v.push_back(nums[i]);
            }
            m[nums[i]]++;
        }
        int n=v.size();
        sort(v.begin(),v.end());
        vector<int>dp(n,-1);
        return solve(v,m,0,dp);
    }
};
