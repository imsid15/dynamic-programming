//https://leetcode.com/problems/target-sum/description/
//MEMOIZATION
class Solution {
public:
    int solve(vector<int>&nums,int index,int target,vector<vector<int>>&dp){
        if(index==0){
            if(target==0 && nums[0]==0){
                return 2;
            }
            else if(target==0 && nums[0]!=0){
                return 1;
            }
            else if(target!=0 && nums[0]==0){
                return 0;
            }
            else{
                if(target==nums[0]){
                    return 1;
            }
                return 0;
            }
        }
        if(dp[index][target]!=-1){
            return dp[index][target];
        }
        int minus=solve(nums,index-1,target,dp);
        int plus=0;
        if(target>=nums[index]){
            plus=solve(nums,index-1,target-nums[index],dp);
        }
        return dp[index][target]=plus+minus;
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        int n=nums.size();
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
        }
        sum=sum+target;
        if(sum<0){
            return 0;
        }
        if(sum%2){
            return 0;
        }
        sum=sum/2;
        vector<vector<int>>dp(n,vector<int>(sum+1,-1));
        return solve(nums,n-1,sum,dp);
    }
};
//TABULATION

class Solution {
public:
    int solve(vector<int>&nums,int index,int target,vector<vector<int>>&dp){
        if(nums[0]==0){
            dp[0][0]=2;
        }
        else{
            dp[0][0]=1;
        }
        if(nums[0]!=0 && nums[0]<=target){
            dp[0][nums[0]]=1;
        }
        for(int i=1;i<=index;i++){
            for(int j=0;j<=target;j++){
            int minus=dp[i-1][j];
            int plus=0;
            if(j>=nums[i]){
                plus=dp[i-1][j-nums[i]];
            }
            dp[i][j]=plus+minus;
            }
        }
        return dp[index][target];
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        int n=nums.size();
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
        }
        sum=sum+target;
        if(sum<0){
            return 0;
        }
        if(sum%2){
            return 0;
        }
        sum=sum/2;
        vector<vector<int>>dp(n,vector<int>(sum+1,0));
        return solve(nums,n-1,sum,dp);
    }
};

//SPACE OPT

class Solution {
public:
    int solve(vector<int>&nums,int index,int target){
        vector<int>prev(target+1,0);
        vector<int>curr(target+1,0);
        if(nums[0]==0){
            prev[0]=2;
        }
        else{
            prev[0]=1;
        }
        if(nums[0]!=0 && nums[0]<=target){
            prev[nums[0]]=1;
        }
        for(int i=1;i<=index;i++){
            for(int j=0;j<=target;j++){
            int minus=prev[j];
            int plus=0;
            if(j>=nums[i]){
                plus=prev[j-nums[i]];
            }
            curr[j]=plus+minus;
            }
            prev=curr;
        }
        return prev[target];
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        int n=nums.size();
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
        }
        sum=sum+target;
        if(sum<0){
            return 0;
        }
        if(sum%2){
            return 0;
        }
        sum=sum/2;
        return solve(nums,n-1,sum);
    }
};
