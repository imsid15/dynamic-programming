//https://leetcode.com/problems/largest-divisible-subset/description/
class Solution {
public:
    vector<int>solve(vector<int> &arr, int n){
        sort(arr.begin(),arr.end());
    vector<int>ans;
    vector<int>hash(n);
    for(int i=0;i<n;i++){
        hash[i]=i;
    }
    vector<int>dp(n,1);
    for(int i=0;i<n;i++){
        for(int j=0;j<=i-1;j++){
            if(arr[i]%arr[j]==0 && 1+dp[j]>dp[i]){
                dp[i]=1+dp[j];
                hash[i]=j;
       }
        }
    }
    int index=-1;
    int maxi=-1;
    for(int i=0;i<n;i++){
        if(dp[i]>maxi){
            maxi=dp[i];
            index=i;
        }
    }
    ans.push_back(arr[index]);
    while(hash[index]!=index){
        index=hash[index];
        ans.push_back(arr[index]);
    }
    reverse(ans.begin(),ans.end());
    return ans;
}
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        return solve(nums,n);
    }
};
