//https://leetcode.com/problems/n-th-tribonacci-number/submissions/?envType=study-plan-v2&envId=dynamic-programming
//MEMORIzATION
int solve(int n,vector<int>&dp){
        if(n==1 || n==0){
            return n;
        }
        if(n==2){
            return 1;
        }
        if(dp[n]!=-1){
            return dp[n];
        }
        return dp[n]=solve(n-1,dp)+solve(n-2,dp)+solve(n-3,dp);
    }
    int tribonacci(int n) {
        vector<int>dp(n+1,-1);
        return solve(n,dp);
    }
//TABULATION

int solve(int n,vector<int>&dp){
        dp[0]=0;
        dp[1]=1;
        dp[2]=1;
        for(int i=3;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2]+dp[i-3];
        }
        return dp[n];
    }
    int tribonacci(int n) {
        if(n==0){
            return 0;
        }
        if(n<=2){
            return 1;
        }
        vector<int>dp(n+1,0);
        return solve(n,dp);
    }

//SPACE OPT
int solve(int n){
        int prev1=0;
        int prev2=1;
        int prev3=1;
        int curr;
        for(int i=3;i<=n;i++){
            curr=prev1+prev2+prev3;
            prev1=prev2;
            prev2=prev3;
            prev3=curr;
        }
        return prev3;
    }
    int tribonacci(int n) {
        if(n==0){
            return 0;
        }
        if(n<=2){
            return 1;
        }
        return solve(n);
    }
